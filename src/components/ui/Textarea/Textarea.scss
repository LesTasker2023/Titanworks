// Textarea component SCSS overrides
// Use this file for ENHANCEMENTS that can't be achieved with Tailwind classes
// Avoid duplicating what Tailwind already provides
.textarea {
  // Base textarea styles (replacing Tailwind classes)
  display: flex;
  min-height: 60px;
  width: 100%;
  border-radius: var(--radius);
  border: 1px solid hsl(var(--border));
  background-color: transparent;
  padding: 0.5rem 0.75rem;
  font-size: 0.875rem;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  &::placeholder {
    color: hsl(var(--muted-foreground));
  }
  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 1px hsl(var(--ring));
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
  // Smooth transitions for all interactive states
  transition: all 0.15s ease-in-out;
  // Responsive font size
  @media (min-width: 768px) {
    font-size: 0.875rem;
  }
  // Enhanced focus styles for better accessibility
  &:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
    box-shadow: 0 0 0 2px hsl(var(--ring) / 0.2);
  }
  // Error state styling
  &--error {
    border-color: hsl(var(--destructive));
    box-shadow: 0 0 0 1px hsl(var(--destructive) / 0.2);
    &:focus-visible {
      outline-color: hsl(var(--destructive));
      box-shadow: 0 0 0 2px hsl(var(--destructive) / 0.2);
    }
  }
  // Loading state with subtle animation
  &--loading {
    position: relative;
    pointer-events: none;
    &::after {
      content: "";
      position: absolute;
      right: 12px;
      top: 12px;
      width: 16px;
      height: 16px;
      border: 2px solid;
      border-radius: 50%;
      border-color: hsl(var(--muted-foreground)) transparent hsl(var(--muted-foreground)) hsl(var(--muted-foreground));
      animation: spin 1s linear infinite;
      opacity: 0.7;
    }
  }
  // Enhanced disabled state (supplement Tailwind's disabled styles)
  &:disabled {
    background-color: hsl(var(--muted) / 0.5);
    &::placeholder {
      color: hsl(var(--muted-foreground) / 0.5);
    }
  }
  // Enhanced hover state for better UX
  &:hover:not(:disabled):not(:focus) {
    border-color: hsl(var(--border) / 0.8);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }
  // Resize handle styling (WebKit)
  &::-webkit-resizer {
    background-color: hsl(var(--muted-foreground) / 0.3);
    border-radius: 2px;
  }
  // Custom scrollbar styling
  &::-webkit-scrollbar {
    width: 8px;
  }
  &::-webkit-scrollbar-track {
    background: hsl(var(--muted) / 0.3);
    border-radius: 4px;
  }
  &::-webkit-scrollbar-thumb {
    background: hsl(var(--muted-foreground) / 0.4);
    border-radius: 4px;
    &:hover {
      background: hsl(var(--muted-foreground) / 0.6);
    }
  }
  // Mobile touch targets (accessibility enhancement)
  @media (max-width: 640px) {
    min-height: 44px; // iOS accessibility requirement
    font-size: 16px; // Prevent zoom on iOS
  }
  // Reduced motion respect (accessibility - not in Tailwind)
  @media (prefers-reduced-motion: reduce) {
    transition: none;
    animation: none;
    &--loading::after {
      animation: none;
      border: 2px solid hsl(var(--muted-foreground));
      border-top-color: transparent;
    }
  }
  // High contrast mode (accessibility - not in Tailwind)
  @media (prefers-contrast: high) {
    border: 2px solid;
    &:focus-visible {
      outline-width: 3px;
    }
  }
}
// Textarea wrapper styling
.textarea-wrapper {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  width: 100%;
}
// Label styling
.textarea-label {
  font-weight: 500;
  color: hsl(var(--foreground));
  font-size: 0.875rem;
  // Required indicator
  .textarea-required {
    color: hsl(var(--destructive));
    margin-left: 2px;
  }
}
// Footer container for error/helper/count
.textarea-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 0.5rem;
  min-height: 1.25rem; // Prevent layout shift
}
// Error message styling
.textarea-error {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  color: hsl(var(--destructive));
  font-size: 0.875rem;
  flex: 1;
  &::before {
    content: "âš ";
    font-size: 0.75rem;
  }
}
// Helper text styling
.textarea-helper {
  color: hsl(var(--muted-foreground));
  font-size: 0.875rem;
  flex: 1;
}
// Character count styling
.textarea-count {
  color: hsl(var(--muted-foreground));
  font-size: 0.75rem;
  font-variant-numeric: tabular-nums;
  white-space: nowrap;
  transition: color 0.15s ease-in-out;
  // Warning state (90% of maxLength)
  &--warning {
    color: hsl(var(--warning, 38 92% 50%));
  }
  // Error state (at maxLength)
  &--error {
    color: hsl(var(--destructive));
    font-weight: 600;
  }
}
// Auto-resize textarea utility class (opt-in)
.textarea--auto-resize {
  resize: none;
  overflow: hidden;
  min-height: 60px;
}
// Loading spinner animation
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
